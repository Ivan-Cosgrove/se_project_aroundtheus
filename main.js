!function(){"use strict";class e{constructor(e,t,r,s,o){let{name:i,link:n,_id:a,isLiked:c}=e;this.name=i,this.link=n,this._id=a,this.isLiked=c,this._template=t,this._viewImage=r,this._handleDelete=s,this._sendLike=o}_toggleLike(){this._cardElement.querySelector(".card__button-like").classList.toggle("card__button_clicked")}_removeCard(){this._cardElement.remove(),this._cardElement=null}_setEventListeners(){const e=this._cardElement.querySelector(".card__button-like"),t=this._cardElement.querySelector(".card__button-delete"),r=this._cardElement.querySelector(".card__image");e.addEventListener("click",(()=>{this._toggleLike(),this._sendLike(this)})),t.addEventListener("click",(()=>(this._handleDelete(this),this._cardElement))),r.addEventListener("click",(()=>{this._viewImage(this)}))}createCard(){this._template=document.querySelector(this._template).content,this._cardElement=this._template.querySelector(".card").cloneNode(!0);const e=this._cardElement.querySelector(".card__title"),t=this._cardElement.querySelector(".card__image"),r=this.name,s=this.link,o=this._id;return e.textContent=r,t.src=s,t.alt=r,this._cardElement.id=o,this._cardElement.isLiked=this.isLiked,this._cardElement.isLiked?this._cardElement.querySelector(".card__button-like").classList.add("card__button_clicked"):this._cardElement.querySelector(".card__button-like").classList.remove("card__button_clicked"),this._setEventListeners(),this._cardElement}}class t{constructor(e){let{popup:t}=e;this._popup=t}_handleEscClose=e=>{"Escape"===e.key&&this.close()};open(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("modal-box_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("modal-box_opened")}setEventListeners(){this._popup.querySelector(".modal-box__close-button").addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("click",(e=>{e.target.classList.contains("modal-box_opened")&&this.close()}))}}class r extends t{constructor(e,t){super({popup:e}),this._popupForm=this._popup.querySelector(".form"),this._formSubmit=t,this.submitButton=this._popupForm.querySelector(".form__button")}_getInputValues(){const e=this._popup.querySelectorAll(".form__input"),t={};return e.forEach((e=>{let{name:r,value:s}=e;t[r]=s})),t}close(){this._popupForm.reset(),super.close()}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.submitButton.textContent="Saving...",this._formSubmit(this._getInputValues())})),super.setEventListeners()}}class s{constructor(e,t){this._config=e,this._form=t}_hideError(e){const t=this._form.querySelector(`.${e.id}-error`);t.classList.remove(this._config.error),e.classList.remove(this._config.inputError),t.textContent=""}_showError(e){const t=this._form.querySelector(`.${e.id}-error`);t.classList.add(this._config.error),e.classList.add(this._config.inputError),t.textContent=e.validationMessage}_toggleInputErrors(e){e.validity.valid?this._hideError(e):this._showError(e)}_disableSubmit(){const e=this._form.querySelector(this._config.submitButton);e.setAttribute("disabled",!0),e.classList.add(this._config.inactiveButton)}_enableSubmit(){const e=this._form.querySelector(this._config.submitButton);e.removeAttribute("disabled"),e.classList.remove(this._config.inactiveButton)}_checkForInvalidInput(){return[...this._form.querySelectorAll(this._config.input)].some((e=>!e.validity.valid))}toggleSubmitButton(){this._checkForInvalidInput()?this._disableSubmit():this._enableSubmit()}_setEventListeners(){[...this._form.querySelectorAll(this._config.input)].forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputErrors(e),this.toggleSubmitButton()}))}))}enableValidation(){this._setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault()}))}}class o{constructor(e,t){let{items:r,renderer:s}=e;this._renderedItems=r,this._renderer=s,this.cardBin=t}renderItems(){this._renderedItems.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this.cardBin.prepend(e)}}document.querySelector(".cards__list");const i=document.querySelector("#edit-profile"),n=document.querySelector("#add-card"),a=(i.querySelector(".modal-box__close-button"),n.querySelector(".modal-box__close-button"));document.querySelector(".profile__title"),document.querySelector(".profile__subtitle"),i.querySelector(".form__input_type_name"),i.querySelector(".form__input_type_description"),a.closest(".form");const c=document.querySelector("#edit-profile"),d=document.querySelector(".profile__title"),l=document.querySelector(".profile__subtitle"),u=document.querySelector("#add-card"),_=document.querySelector(".cards__list"),h=document.querySelector(".profile__buttons-edit"),m=document.querySelector(".profile__buttons-add"),p=document.querySelector("#display-image"),b=p.querySelector(".modal-box__image"),f=document.querySelector(".form__input_type_name"),y=document.querySelector(".form__input_type_description"),S=document.querySelector(".profile__image"),E=document.querySelector("#change-avatar"),v=document.querySelector(".profile__buttons-image-edit"),g=document.querySelector("#delete-modal"),L=(document.querySelector("#delete-name"),document.querySelector("#delete-link"),document.querySelector("#delete-id")),k={editModal:"#edit-profile",addModal:"#add-card",changeAvatar:"#change-avatar",name:".profile__title",description:".profile__subtitle",form:".form",input:".form__input",submitButton:".form__button",inactiveButton:"form__button_disabled",inputError:"form__input_invalid",error:"form__error_visible",baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"eb144407-9d56-4c39-8eac-7fa32452a67f","content-type":"application/JSON"}},q=new class{constructor(e){this._options=e}getInitialCards(){return fetch(`${this._options.baseUrl}/cards`,{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._options.baseUrl}/users/me`,{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}submitUserInfo(e){fetch(`${this._options.baseUrl}/users/me`,{headers:this._options.headers,method:"POST",body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateUserInfo(e){fetch(`${this._options.baseUrl}/users/me`,{method:"PATCH",headers:this._options.headers,body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateProfilePicture(e){return fetch(`${this._options.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._options.headers,body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}sendCard(e){return fetch(`${this._options.baseUrl}/cards`,{method:"POST",headers:this._options.headers,body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e,t){return fetch(`${this._options.baseUrl}/cards/${e}`,{method:"DELETE",headers:this._options.headers,body:JSON.stringify(t)}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}likeCard(e,t){return fetch(`${this._options.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._options.headers,body:JSON.stringify(t)})}removeLike(e,t){return fetch(`${this._options.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._options.headers,body:JSON.stringify(t)})}}({baseUrl:k.baseUrl,headers:k.headers});let C,I;q.getUserInfo().then((e=>{P.setUserInfo(e),S.src=e.avatar})),q.getInitialCards().then((e=>{C=new o({items:e,renderer:e=>{C.addItem(A(e))}},_),C.renderItems()}));const x=new class extends t{constructor(e,t){super({popup:e}),this._image=t}open(e){const t=this._popup.querySelector(".modal-box__image"),r=this._popup.querySelector(".modal-box__caption"),s=e.name,o=e.link;return r.textContent=s,t.src=o,t.alt=`Preview image for ${s}`,super.open(),e}}(p,b);x.setEventListeners();const $=e=>{x.open(e)},U=new r(g,(e=>{q.deleteCard(e._id,e).then((()=>{U.submitButton.textContent="Delete Card",I=document.querySelectorAll(".card"),I.forEach((t=>{t.id===e._id&&t.remove()})),U.close()})).catch((e=>{alert(`Request to server failed. ${e}`)}))}));U.setEventListeners();const w=e=>{U.open(),L.value=e._id};function B(e){e.isLiked?q.removeLike(e._id,e).then(e.isLiked=!1).then(alert(`Like for "${e.name}" removed`)):q.likeCard(e._id,e).then(e.isLiked=!0).then(alert(`Like for "${e.name}" added`))}const P=new class{constructor(e){let{name:t,about:r}=e;this._name=t,this._about=r}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e){this._name.textContent=e.name,this._about.textContent=e.about}}({name:d,about:l}),j=new r(u,(e=>{q.sendCard(e).then((e=>{C.addItem(A(e)),j.submitButton.textContent="Create",j.close()}))}));j.setEventListeners();const O=new r(E,(e=>{q.updateProfilePicture(e).then((e=>{S.src=e.avatar,O.close(),O.submitButton.textContent="Change Picture"}))}));function A(t){return new e(t,"#card",$,w,B).createCard()}O.setEventListeners();const N=new r(c,(e=>{q.updateUserInfo(e),d.textContent=e.name,l.textContent=e.about,N.close()}));N.setEventListeners(),h.addEventListener("click",(function(){N.open();const e=P.getUserInfo();f.value=e.name,y.value=e.about,D.toggleSubmitButton()}));const J=new s(k,E);J.enableValidation(),v.addEventListener("click",(()=>{O.open(),J.toggleSubmitButton()})),m.addEventListener("click",(function(){j.open(),T.toggleSubmitButton()}));const D=new s(k,c);D.enableValidation();const T=new s(k,u);T.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,